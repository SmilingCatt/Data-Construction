#include<stdio.h>
#include<stdlib.h>
typedef int QElemType;
typedef struct QNode{
	QElemType data;
	struct QNode *next;
}Qnode,*QuenePtr;
typedef struct{
	QuenePtr front;
	QuenePtr rear;
}LinkQuene;
void Initquene(LinkQuene &s){
	s.front=(QuenePtr)malloc(sizeof(Qnode));
	if(!s.front)
		exit(-1);
	s.rear=s.front;
	s.front->next=NULL;
}
void enquene(LinkQuene &s,QElemType e){
	QuenePtr p=(QuenePtr)malloc(sizeof(Qnode));
	if(!p)
		exit(-1);
	p->data=e;
	p->next=NULL;
	s.rear->next=p;
	s.rear=p;
}
void dequene(LinkQuene &s,QElemType &e){
	if(s.front==s.rear){
		printf("出错");
		exit(0);
	}
	QuenePtr p=s.front->next;
	e=p->data;
	s.front->next=p->next;
	if(s.rear==p){
		s.rear=s.front;
	}
	free(p);
}
int Destory(LinkQuene &s){
	while(s.front){
		s.rear=s.front->next;
		free(s.front);
		s.front=s.rear;
	}
	if(s.front==s.rear){
		return 1;
	}
	return 0;
}
void print(LinkQuene s,int n){
	QuenePtr p=s.front->next;
	while(p!=s.rear){
		printf("%d ",p->data);
		p=p->next;
	}
	printf("%d",p->data);
	printf("\n");
}
int main(){
	LinkQuene s;
	Initquene(s);
	int n,m,x;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&m);
		enquene(s,m);
	}
	print(s,n);
//	printf("\n");
	dequene(s,x);
	printf("%d",x);
	printf("\n");
	print(s,n-1);
	int a=Destory(s);
	if(a==1)
	printf("已销毁");
	else
	printf("还没销毁呢***");
	return 0;
}
